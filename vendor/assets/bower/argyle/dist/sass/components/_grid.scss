@import "../context";
@import "../helpers/breakpoints";
@import "../helpers/clearfix";

@mixin ar-grid-row() {
  $grid-ctx: ar-require-context("grid");

  $gutter-width: map-get($grid-ctx, "gutter-width");

  @if ($gutter-width) {
    margin-left: -($gutter-width / 2);
    margin-right: -($gutter-width / 2);
  }

  @include ar-clearfix;
}

@mixin ar-grid-row-item($width) {
  $grid-ctx: ar-require-context("grid");

  $gutter-width: ar-get-context-value($grid-ctx, "gutter-width");
  $float:        ar-get-context-value($grid-ctx, "float", left);

  padding-left: $gutter-width / 2;
  padding-right: $gutter-width / 2;
  box-sizing: border-box;
  width: $width;
  float: $float;
}

@mixin ar-grid-row-item-vspace($width-cols, $vspace: null) {
  $grid-ctx: ar-require-context("grid");

  $columns: ar-get-context-value($grid-ctx, "columns");
  $vspace: ar-get-context-value($grid-ctx, "vspace") !default;

  $items-per-row: $columns / $width-cols;

  @if ($vspace) {
    &:nth-child(n+2) {
      margin-top: $vspace;
    }

    &:nth-child(-n+#{$items-per-row}) {
      margin-top: 0;
    }
  }
}

@mixin ar-grid-row-item-offset($offset) {
  margin-left: $offset;
}

@mixin ar-grid-cols($width-cols, $offset-cols: null, $from: null, $to: null, $float: null, $vspace: null) {
  $grid-ctx: ar-require-context("grid");

  $columns: ar-get-context-value($grid-ctx, "columns");
  $float:   ar-get-context-value($grid-ctx, "float", left) !default;
  $vspace:  ar-get-context-value($grid-ctx, "vspace")      !default;

  @include ar-with-context(( "grid": (
    "float":  $float,
    "vspace": $vspace
  ))) {
    @include ar-breakpoint-query($from, $to) {
      @include ar-grid-row-item(percentage($width-cols / $columns));
      @include ar-grid-row-item-vspace($width-cols);
      @if $offset-cols {
        @include ar-grid-row-item-offset(percentage($offset-cols / $columns))
      }
    }
  }
}
